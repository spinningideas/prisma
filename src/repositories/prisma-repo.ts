//! Do not edit this file manually, it is generate by `prisma repo generator`

import { PrismaClient, Prisma, Continent, Country } from "@prisma/client";
import _ from "lodash";

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export type AnyRecord = Record<string, any>;

export type BaseOption<Include, Select> = {
  include?: Include;
  select?: Select;
};

export type Find<Select, Include, Cursor, Order, Distinct> = BaseOption<
  Include,
  Select
> & {
  cursor?: Cursor;
  take?: number;
  skip?: number;
  orderBy?: Prisma.Enumerable<Order>;
  distinct?: Distinct;
};

export type CountArgs<Select, Cursor, Order, Distinct> = Omit<
  Find<Select, never, Cursor, Order, Distinct>,
  "include"
>;

export type Aggregate<Cursor, Order, Distinct> = Omit<
  CountArgs<never, Cursor, Order, Distinct>,
  "select" | "distinct"
>;

export const prisma = new PrismaClient({
  log: [],
});

export const models = _.omit(prisma, [
  "$on",
  "$connect",
  "$disconnect",
  "$use",
  "$executeRaw",
  "$executeRawUnsafe",
  "$queryRaw",
  "$queryRawUnsafe",
  "$transaction",
]);

export const MODELS_NAME = {
  CONTINENT: "continent",
  COUNTRY: "country",
} as const;

// eslint-disable-next-line @typescript-eslint/ban-types
export type ModelStructure = {
  continent: Continent;
  country: Country;
};

export type ModelName = keyof ModelStructure;

export type ModelScalarFields<T extends keyof ModelStructure> =
  Prisma.Enumerable<keyof ModelStructure[T]>;

export type ModelDelegate =
  | Prisma.RejectOnNotFound
  | Prisma.RejectPerOperation
  | undefined;

export type ModelTypes = {
  continent: {
    Where: Prisma.ContinentWhereInput;
    Select: Prisma.ContinentSelect;
    Include: unknown;
    Create: Prisma.ContinentCreateInput | Prisma.ContinentUncheckedCreateInput;
    Update: Prisma.ContinentUpdateInput | Prisma.ContinentUncheckedUpdateInput;
    Cursor: Prisma.ContinentWhereUniqueInput;
    Order: Prisma.ContinentOrderByWithRelationInput;
    Delegate: Prisma.ContinentDelegate<ModelDelegate>;
    GroupBy: Prisma.ContinentGroupByOutputType;
  };
  country: {
    Where: Prisma.CountryWhereInput;
    Select: Prisma.CountrySelect;
    Include: unknown;
    Create: Prisma.CountryCreateInput | Prisma.CountryUncheckedCreateInput;
    Update: Prisma.CountryUpdateInput | Prisma.CountryUncheckedUpdateInput;
    Cursor: Prisma.CountryWhereUniqueInput;
    Order: Prisma.CountryOrderByWithRelationInput;
    Delegate: Prisma.CountryDelegate<ModelDelegate>;
    GroupBy: Prisma.CountryGroupByOutputType;
  };
};
